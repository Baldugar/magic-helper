package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"fmt"
	"magic-helper/graph/admin"
	"magic-helper/graph/gentypes"
	"magic-helper/graph/model"
	"magic-helper/graph/mtg"
	"magic-helper/util/auth"
)

// Mutation resolvers delegate to the mtg package which holds domain logic.
// This layer remains thin, mapping GraphQL to service functions.
// CreateMTGDeck is the resolver for the createMTGDeck field.
func (r *mutationResolver) CreateMTGDeck(ctx context.Context, input model.MtgCreateDeckInput) (*model.Response, error) {
	return mtg.CreateMTGDeck(ctx, input)
}

// DeleteMTGDeck is the resolver for the deleteMTGDeck field.
func (r *mutationResolver) DeleteMTGDeck(ctx context.Context, input model.MtgDeleteDeckInput) (*model.Response, error) {
	return mtg.DeleteMTGDeck(ctx, input)
}

// UpdateMTGDeck is the resolver for the updateMTGDeck field.
func (r *mutationResolver) UpdateMTGDeck(ctx context.Context, input model.MtgUpdateDeckInput) (*model.Response, error) {
	return mtg.UpdateMTGDeck(ctx, input)
}

// SaveMTGDeckAsCopy is the resolver for the saveMTGDeckAsCopy field.
func (r *mutationResolver) SaveMTGDeckAsCopy(ctx context.Context, input model.MtgUpdateDeckInput) (*model.Response, error) {
	return mtg.SaveMTGDeckAsCopy(ctx, input)
}

// CreateMTGCardPackage is the resolver for the createMTGCardPackage field.
func (r *mutationResolver) CreateMTGCardPackage(ctx context.Context, input model.MtgCreateCardPackageInput) (*model.Response, error) {
	return mtg.CreateMTGCardPackage(ctx, input)
}

// DeleteMTGCardPackage is the resolver for the deleteMTGCardPackage field.
func (r *mutationResolver) DeleteMTGCardPackage(ctx context.Context, input model.MtgDeleteCardPackageInput) (*model.Response, error) {
	return mtg.DeleteMTGCardPackage(ctx, input)
}

// EditMTGCardPackageName is the resolver for the editMTGCardPackageName field.
func (r *mutationResolver) EditMTGCardPackageName(ctx context.Context, input model.MtgEditCardPackageNameInput) (*model.Response, error) {
	panic(fmt.Errorf("not implemented: EditMTGCardPackageName - editMTGCardPackageName"))
}

// AddMTGCardToCardPackage is the resolver for the addMTGCardToCardPackage field.
func (r *mutationResolver) AddMTGCardToCardPackage(ctx context.Context, input model.MtgAddCardToCardPackageInput) (*model.Response, error) {
	return mtg.AddMTGCardToCardPackage(ctx, input)
}

// RemoveMTGCardFromCardPackage is the resolver for the removeMTGCardFromCardPackage field.
func (r *mutationResolver) RemoveMTGCardFromCardPackage(ctx context.Context, input model.MtgRemoveCardFromCardPackageInput) (*model.Response, error) {
	return mtg.RemoveMTGCardFromCardPackage(ctx, input)
}

// CreateTag is the resolver for the createTag field.
func (r *mutationResolver) CreateTag(ctx context.Context, input model.CreateTagInput) (*model.Response, error) {
	return mtg.CreateTag(ctx, input)
}

// UpdateTag is the resolver for the updateTag field.
func (r *mutationResolver) UpdateTag(ctx context.Context, input model.UpdateTagInput) (*model.Response, error) {
	return mtg.UpdateTag(ctx, input)
}

// DeleteTag is the resolver for the deleteTag field.
func (r *mutationResolver) DeleteTag(ctx context.Context, tagID string) (*model.Response, error) {
	return mtg.DeleteTag(ctx, tagID)
}

// AssignTag is the resolver for the assignTag field.
func (r *mutationResolver) AssignTag(ctx context.Context, input model.AssignTagInput) (*model.Response, error) {
	return mtg.AssignTag(ctx, input)
}

// UnassignTag is the resolver for the unassignTag field.
func (r *mutationResolver) UnassignTag(ctx context.Context, input model.UnassignTagInput) (*model.Response, error) {
	return mtg.UnassignTag(ctx, input)
}

// Rate is the resolver for the rate field.
func (r *mutationResolver) Rate(ctx context.Context, input model.RateInput) (*model.Response, error) {
	return mtg.Rate(ctx, input)
}

// AddIgnoredCard is the resolver for the addIgnoredCard field.
func (r *mutationResolver) AddIgnoredCard(ctx context.Context, input model.AddIgnoredCardInput) (*model.Response, error) {
	return mtg.AddIgnoredCard(ctx, input)
}

// RemoveIgnoredCard is the resolver for the removeIgnoredCard field.
func (r *mutationResolver) RemoveIgnoredCard(ctx context.Context, input model.RemoveIgnoredCardInput) (*model.Response, error) {
	return mtg.RemoveIgnoredCard(ctx, input)
}

// AdminRetryImport is the resolver for the adminRetryImport field.
func (r *mutationResolver) AdminRetryImport(ctx context.Context, input model.AdminImportActionInput) (*model.Response, error) {
	if err := auth.RequireRole(ctx, auth.RoleAdmin); err != nil {
		return nil, err
	}
	return admin.RetryImport(ctx, input)
}

// AdminBackfillImport is the resolver for the adminBackfillImport field.
func (r *mutationResolver) AdminBackfillImport(ctx context.Context, input model.AdminImportActionInput) (*model.Response, error) {
	if err := auth.RequireRole(ctx, auth.RoleAdmin); err != nil {
		return nil, err
	}
	return admin.BackfillImport(ctx, input)
}

// Mutation returns gentypes.MutationResolver implementation.
func (r *Resolver) Mutation() gentypes.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
