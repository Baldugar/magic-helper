package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"magic-helper/graph/gentypes"
	"magic-helper/graph/model"
	"magic-helper/graph/mtg"
)

// GetMTGCards is the resolver for the getMTGCards field.
func (r *queryResolver) GetMTGCards(ctx context.Context) ([]*model.MtgCard, error) {
	return mtg.GetMTGCards(ctx)
}

// GetMTGCardsFiltered is the resolver for the getMTGCardsFiltered field.
func (r *queryResolver) GetMTGCardsFiltered(ctx context.Context, filter model.MtgFilterSearchInput, pagination model.MtgFilterPaginationInput, sort []*model.MtgFilterSortInput) (*model.MtgFilterSearch, error) {
	return mtg.GetMTGCardsFiltered(ctx, filter, pagination, sort)
}

// GetMTGFilters is the resolver for the getMTGFilters field.
func (r *queryResolver) GetMTGFilters(ctx context.Context) (*model.MtgFilterEntries, error) {
	return mtg.GetMTGFilters(ctx)
}

// GetMTGDecks is the resolver for the getMTGDecks field.
func (r *queryResolver) GetMTGDecks(ctx context.Context) ([]*model.MtgDeckDashboard, error) {
	return mtg.GetMTGDecks(ctx)
}

// GetMTGDeck is the resolver for the getMTGDeck field.
func (r *queryResolver) GetMTGDeck(ctx context.Context, deckID string) (*model.MtgDeck, error) {
	return mtg.GetMTGDeck(ctx, deckID)
}

// GetMTGCardPackages is the resolver for the getMTGCardPackages field.
func (r *queryResolver) GetMTGCardPackages(ctx context.Context, cardPackageID *string) ([]*model.MtgCardPackage, error) {
	return mtg.GetMTGCardPackages(ctx, cardPackageID)
}

// Tags is the resolver for the tags field.
func (r *queryResolver) Tags(ctx context.Context) ([]model.Tag, error) {
	return mtg.GetTags(ctx)
}

// CardTags is the resolver for the cardTags field.
func (r *queryResolver) CardTags(ctx context.Context) ([]*model.CardTag, error) {
	return mtg.GetCardTags(ctx)
}

// DeckTags is the resolver for the deckTags field.
func (r *queryResolver) DeckTags(ctx context.Context) ([]*model.DeckTag, error) {
	return mtg.GetDeckTags(ctx)
}

// Tag is the resolver for the tag field.
func (r *queryResolver) Tag(ctx context.Context, id string) (model.Tag, error) {
	return mtg.GetTag(ctx, id)
}

// Query returns gentypes.QueryResolver implementation.
func (r *Resolver) Query() gentypes.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
