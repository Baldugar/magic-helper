// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type MtgCommonFields interface {
	IsMtgCommonFields()
	GetColors() []MtgColor
	GetFlavorText() *string
	GetImage() *MtgImage
	GetLoyalty() *string
	GetName() string
	GetPower() *string
	GetProducedMana() []MtgColor
	GetToughness() *string
	GetTypeLine() string
}

type FlowZone struct {
	ID          string    `json:"ID"`
	Name        string    `json:"name"`
	Position    *Position `json:"position"`
	Width       float64   `json:"width"`
	Height      float64   `json:"height"`
	ChildrenIDs []string  `json:"childrenIDs"`
}

type FlowZoneInput struct {
	ID          string         `json:"ID"`
	Name        string         `json:"name"`
	Position    *PositionInput `json:"position"`
	Width       float64        `json:"width"`
	Height      float64        `json:"height"`
	ChildrenIDs []string       `json:"childrenIDs"`
}

type MtgCard struct {
	ID            string         `json:"_key"`
	CardFaces     []*MtgCardFace `json:"cardFaces,omitempty"`
	Cmc           int            `json:"cmc"`
	ColorIdentity []MtgColor     `json:"colorIdentity"`
	Colors        []MtgColor     `json:"colors,omitempty"`
	Description   *string        `json:"description,omitempty"`
	FlavorText    *string        `json:"flavorText,omitempty"`
	Image         *MtgImage      `json:"image,omitempty"`
	Layout        string         `json:"layout"`
	Legalities    map[string]any `json:"legalities"`
	Loyalty       *string        `json:"loyalty,omitempty"`
	ManaCost      *string        `json:"manaCost,omitempty"`
	Name          string         `json:"name"`
	Power         *string        `json:"power,omitempty"`
	ProducedMana  []MtgColor     `json:"producedMana,omitempty"`
	Rarity        MtgRarity      `json:"rarity"`
	ReleasedAt    string         `json:"releasedAt"`
	Set           string         `json:"set"`
	SetName       string         `json:"setName"`
	Toughness     *string        `json:"toughness,omitempty"`
	TypeLine      string         `json:"typeLine"`
	ScryfallURL   string         `json:"scryfallURL"`
}

func (MtgCard) IsMtgCommonFields() {}
func (this MtgCard) GetColors() []MtgColor {
	if this.Colors == nil {
		return nil
	}
	interfaceSlice := make([]MtgColor, 0, len(this.Colors))
	for _, concrete := range this.Colors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this MtgCard) GetFlavorText() *string { return this.FlavorText }
func (this MtgCard) GetImage() *MtgImage    { return this.Image }
func (this MtgCard) GetLoyalty() *string    { return this.Loyalty }
func (this MtgCard) GetName() string        { return this.Name }
func (this MtgCard) GetPower() *string      { return this.Power }
func (this MtgCard) GetProducedMana() []MtgColor {
	if this.ProducedMana == nil {
		return nil
	}
	interfaceSlice := make([]MtgColor, 0, len(this.ProducedMana))
	for _, concrete := range this.ProducedMana {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this MtgCard) GetToughness() *string { return this.Toughness }
func (this MtgCard) GetTypeLine() string   { return this.TypeLine }

type MtgCardFace struct {
	Colors       []MtgColor `json:"colors,omitempty"`
	Description  string     `json:"description"`
	FlavorText   *string    `json:"flavorText,omitempty"`
	Image        *MtgImage  `json:"image,omitempty"`
	Loyalty      *string    `json:"loyalty,omitempty"`
	ManaCost     string     `json:"manaCost"`
	Name         string     `json:"name"`
	Power        *string    `json:"power,omitempty"`
	ProducedMana []MtgColor `json:"producedMana,omitempty"`
	Toughness    *string    `json:"toughness,omitempty"`
	TypeLine     string     `json:"typeLine"`
}

func (MtgCardFace) IsMtgCommonFields() {}
func (this MtgCardFace) GetColors() []MtgColor {
	if this.Colors == nil {
		return nil
	}
	interfaceSlice := make([]MtgColor, 0, len(this.Colors))
	for _, concrete := range this.Colors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this MtgCardFace) GetFlavorText() *string { return this.FlavorText }
func (this MtgCardFace) GetImage() *MtgImage    { return this.Image }
func (this MtgCardFace) GetLoyalty() *string    { return this.Loyalty }
func (this MtgCardFace) GetName() string        { return this.Name }
func (this MtgCardFace) GetPower() *string      { return this.Power }
func (this MtgCardFace) GetProducedMana() []MtgColor {
	if this.ProducedMana == nil {
		return nil
	}
	interfaceSlice := make([]MtgColor, 0, len(this.ProducedMana))
	for _, concrete := range this.ProducedMana {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this MtgCardFace) GetToughness() *string { return this.Toughness }
func (this MtgCardFace) GetTypeLine() string   { return this.TypeLine }

type MtgCreateDeckInput struct {
	List MtgCardListType `json:"list"`
	Name string          `json:"name"`
	Type DeckType        `json:"type"`
}

type MtgDeck struct {
	ID             string          `json:"_key"`
	List           MtgCardListType `json:"list"`
	Name           string          `json:"name"`
	CardFrontImage *string         `json:"cardFrontImage,omitempty"`
	Cards          []*MtgDeckCard  `json:"cards"`
	Zones          []*FlowZone     `json:"zones"`
	Type           DeckType        `json:"type"`
	IgnoredCards   []string        `json:"ignoredCards"`
}

type MtgDeckCard struct {
	Card         *MtgCard        `json:"card"`
	Count        int             `json:"count"`
	Position     *Position       `json:"position"`
	MainOrSide   MainOrSide      `json:"mainOrSide"`
	DeckCardType MtgDeckCardType `json:"deckCardType"`
	Phantoms     []*Phantom      `json:"phantoms"`
}

type MtgDeckCardInput struct {
	ID           string          `json:"ID"`
	Card         string          `json:"card"`
	Count        int             `json:"count"`
	Position     *PositionInput  `json:"position"`
	MainOrSide   MainOrSide      `json:"mainOrSide"`
	DeckCardType MtgDeckCardType `json:"deckCardType"`
	Phantoms     []*PhantomInput `json:"phantoms"`
}

type MtgDeleteDeckInput struct {
	DeckID string          `json:"deckID"`
	List   MtgCardListType `json:"list"`
}

type MtgFilterCardTypes struct {
	CardType string   `json:"cardType"`
	Subtypes []string `json:"subtypes"`
}

type MtgFilterEntries struct {
	Types      []*MtgFilterCardTypes `json:"types"`
	Expansions []*MtgFilterExpansion `json:"expansions"`
	Legality   *MtgFilterLegality    `json:"legality"`
}

type MtgFilterExpansion struct {
	Set        string `json:"set"`
	SetName    string `json:"setName"`
	ReleasedAt int    `json:"releasedAt"`
	ImageURL   string `json:"imageURL"`
}

type MtgFilterLegality struct {
	Formats        []string `json:"formats"`
	LegalityValues []string `json:"legalityValues"`
}

type MtgImage struct {
	ArtCrop    string `json:"artCrop"`
	BorderCrop string `json:"borderCrop"`
	Large      string `json:"large"`
	Normal     string `json:"normal"`
	Png        string `json:"png"`
	Small      string `json:"small"`
}

type MtgUpdateDeckInput struct {
	DeckID         string              `json:"deckID"`
	List           MtgCardListType     `json:"list"`
	Name           string              `json:"name"`
	Type           DeckType            `json:"type"`
	CardFrontImage *string             `json:"cardFrontImage,omitempty"`
	Cards          []*MtgDeckCardInput `json:"cards"`
	Zones          []*FlowZoneInput    `json:"zones"`
	IgnoredCards   []string            `json:"ignoredCards"`
}

type Mutation struct {
}

type Phantom struct {
	Position *Position `json:"position"`
	ID       string    `json:"ID"`
}

type PhantomInput struct {
	ID       string         `json:"ID"`
	Position *PositionInput `json:"position"`
}

type Position struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
}

type PositionInput struct {
	X float64 `json:"x"`
	Y float64 `json:"y"`
}

type Query struct {
}

type Response struct {
	Status  bool    `json:"status"`
	Message *string `json:"message,omitempty"`
}

type DeckType string

const (
	DeckTypeBrawl60  DeckType = "BRAWL_60"
	DeckTypeBrawl100 DeckType = "BRAWL_100"
)

var AllDeckType = []DeckType{
	DeckTypeBrawl60,
	DeckTypeBrawl100,
}

func (e DeckType) IsValid() bool {
	switch e {
	case DeckTypeBrawl60, DeckTypeBrawl100:
		return true
	}
	return false
}

func (e DeckType) String() string {
	return string(e)
}

func (e *DeckType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeckType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeckType", str)
	}
	return nil
}

func (e DeckType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MtgCardListType string

const (
	MtgCardListTypeMtg  MtgCardListType = "MTG"
	MtgCardListTypeMtga MtgCardListType = "MTGA"
)

var AllMtgCardListType = []MtgCardListType{
	MtgCardListTypeMtg,
	MtgCardListTypeMtga,
}

func (e MtgCardListType) IsValid() bool {
	switch e {
	case MtgCardListTypeMtg, MtgCardListTypeMtga:
		return true
	}
	return false
}

func (e MtgCardListType) String() string {
	return string(e)
}

func (e *MtgCardListType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MtgCardListType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MTG_CardListType", str)
	}
	return nil
}

func (e MtgCardListType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MtgColor string

const (
	MtgColorC MtgColor = "C"
	MtgColorW MtgColor = "W"
	MtgColorU MtgColor = "U"
	MtgColorB MtgColor = "B"
	MtgColorR MtgColor = "R"
	MtgColorG MtgColor = "G"
)

var AllMtgColor = []MtgColor{
	MtgColorC,
	MtgColorW,
	MtgColorU,
	MtgColorB,
	MtgColorR,
	MtgColorG,
}

func (e MtgColor) IsValid() bool {
	switch e {
	case MtgColorC, MtgColorW, MtgColorU, MtgColorB, MtgColorR, MtgColorG:
		return true
	}
	return false
}

func (e MtgColor) String() string {
	return string(e)
}

func (e *MtgColor) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MtgColor(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MTG_Color", str)
	}
	return nil
}

func (e MtgColor) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MtgDeckCardType string

const (
	MtgDeckCardTypeNormal    MtgDeckCardType = "NORMAL"
	MtgDeckCardTypeCompanion MtgDeckCardType = "COMPANION"
	MtgDeckCardTypeCommander MtgDeckCardType = "COMMANDER"
)

var AllMtgDeckCardType = []MtgDeckCardType{
	MtgDeckCardTypeNormal,
	MtgDeckCardTypeCompanion,
	MtgDeckCardTypeCommander,
}

func (e MtgDeckCardType) IsValid() bool {
	switch e {
	case MtgDeckCardTypeNormal, MtgDeckCardTypeCompanion, MtgDeckCardTypeCommander:
		return true
	}
	return false
}

func (e MtgDeckCardType) String() string {
	return string(e)
}

func (e *MtgDeckCardType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MtgDeckCardType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MTG_DeckCardType", str)
	}
	return nil
}

func (e MtgDeckCardType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MtgLayout string

const (
	MtgLayoutNormal    MtgLayout = "NORMAL"
	MtgLayoutModalDfc  MtgLayout = "MODAL_DFC"
	MtgLayoutTransform MtgLayout = "TRANSFORM"
	MtgLayoutAdventure MtgLayout = "ADVENTURE"
	MtgLayoutClass     MtgLayout = "CLASS"
	MtgLayoutSaga      MtgLayout = "SAGA"
	MtgLayoutSplit     MtgLayout = "SPLIT"
	MtgLayoutPrototype MtgLayout = "PROTOTYPE"
	MtgLayoutMutate    MtgLayout = "MUTATE"
	MtgLayoutMeld      MtgLayout = "MELD"
	MtgLayoutCase      MtgLayout = "CASE"
)

var AllMtgLayout = []MtgLayout{
	MtgLayoutNormal,
	MtgLayoutModalDfc,
	MtgLayoutTransform,
	MtgLayoutAdventure,
	MtgLayoutClass,
	MtgLayoutSaga,
	MtgLayoutSplit,
	MtgLayoutPrototype,
	MtgLayoutMutate,
	MtgLayoutMeld,
	MtgLayoutCase,
}

func (e MtgLayout) IsValid() bool {
	switch e {
	case MtgLayoutNormal, MtgLayoutModalDfc, MtgLayoutTransform, MtgLayoutAdventure, MtgLayoutClass, MtgLayoutSaga, MtgLayoutSplit, MtgLayoutPrototype, MtgLayoutMutate, MtgLayoutMeld, MtgLayoutCase:
		return true
	}
	return false
}

func (e MtgLayout) String() string {
	return string(e)
}

func (e *MtgLayout) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MtgLayout(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MTG_Layout", str)
	}
	return nil
}

func (e MtgLayout) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MtgRarity string

const (
	MtgRarityCommon   MtgRarity = "COMMON"
	MtgRarityUncommon MtgRarity = "UNCOMMON"
	MtgRarityRare     MtgRarity = "RARE"
	MtgRarityMythic   MtgRarity = "MYTHIC"
)

var AllMtgRarity = []MtgRarity{
	MtgRarityCommon,
	MtgRarityUncommon,
	MtgRarityRare,
	MtgRarityMythic,
}

func (e MtgRarity) IsValid() bool {
	switch e {
	case MtgRarityCommon, MtgRarityUncommon, MtgRarityRare, MtgRarityMythic:
		return true
	}
	return false
}

func (e MtgRarity) String() string {
	return string(e)
}

func (e *MtgRarity) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MtgRarity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MTG_Rarity", str)
	}
	return nil
}

func (e MtgRarity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MainOrSide string

const (
	MainOrSideMain      MainOrSide = "MAIN"
	MainOrSideSideboard MainOrSide = "SIDEBOARD"
)

var AllMainOrSide = []MainOrSide{
	MainOrSideMain,
	MainOrSideSideboard,
}

func (e MainOrSide) IsValid() bool {
	switch e {
	case MainOrSideMain, MainOrSideSideboard:
		return true
	}
	return false
}

func (e MainOrSide) String() string {
	return string(e)
}

func (e *MainOrSide) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MainOrSide(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MainOrSide", str)
	}
	return nil
}

func (e MainOrSide) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
