// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type MtgaCard struct {
	ID            string          `json:"_key"`
	CardFaces     []*MtgaCardFace `json:"cardFaces,omitempty"`
	Cmc           int             `json:"cmc"`
	ColorIdentity []MtgaColor     `json:"colorIdentity"`
	Colors        []MtgaColor     `json:"colors,omitempty"`
	Description   *string         `json:"description,omitempty"`
	FlavorText    *string         `json:"flavorText,omitempty"`
	Image         *MtgaImage      `json:"image,omitempty"`
	Loyalty       *string         `json:"loyalty,omitempty"`
	ManaCost      *string         `json:"manaCost,omitempty"`
	Name          string          `json:"name"`
	Power         *string         `json:"power,omitempty"`
	ProducedMana  []MtgaColor     `json:"producedMana,omitempty"`
	Rarity        MtgaRarity      `json:"rarity"`
	Set           string          `json:"set"`
	SetName       string          `json:"setName"`
	Toughness     *string         `json:"toughness,omitempty"`
	TypeLine      string          `json:"typeLine"`
}

type MtgaCardFace struct {
	Image        *MtgaImage  `json:"image,omitempty"`
	Colors       []MtgaColor `json:"colors,omitempty"`
	FlavorText   *string     `json:"flavorText,omitempty"`
	Loyalty      *string     `json:"loyalty,omitempty"`
	ManaCost     string      `json:"manaCost"`
	Name         string      `json:"name"`
	Description  string      `json:"description"`
	Power        *string     `json:"power,omitempty"`
	ProducedMana []MtgaColor `json:"producedMana,omitempty"`
	Toughness    *string     `json:"toughness,omitempty"`
	TypeLine     string      `json:"typeLine"`
}

type MtgaImage struct {
	Small      string `json:"small"`
	Normal     string `json:"normal"`
	Large      string `json:"large"`
	Png        string `json:"png"`
	ArtCrop    string `json:"artCrop"`
	BorderCrop string `json:"borderCrop"`
}

type Query struct {
}

type Response struct {
	Status  bool    `json:"status"`
	Message *string `json:"message,omitempty"`
}

type MtgaColor string

const (
	MtgaColorC MtgaColor = "C"
	MtgaColorW MtgaColor = "W"
	MtgaColorU MtgaColor = "U"
	MtgaColorB MtgaColor = "B"
	MtgaColorR MtgaColor = "R"
	MtgaColorG MtgaColor = "G"
)

var AllMtgaColor = []MtgaColor{
	MtgaColorC,
	MtgaColorW,
	MtgaColorU,
	MtgaColorB,
	MtgaColorR,
	MtgaColorG,
}

func (e MtgaColor) IsValid() bool {
	switch e {
	case MtgaColorC, MtgaColorW, MtgaColorU, MtgaColorB, MtgaColorR, MtgaColorG:
		return true
	}
	return false
}

func (e MtgaColor) String() string {
	return string(e)
}

func (e *MtgaColor) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MtgaColor(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MTGA_Color", str)
	}
	return nil
}

func (e MtgaColor) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MtgaLayout string

const (
	MtgaLayoutNormal    MtgaLayout = "NORMAL"
	MtgaLayoutModalDfc  MtgaLayout = "MODAL_DFC"
	MtgaLayoutTransform MtgaLayout = "TRANSFORM"
	MtgaLayoutAdventure MtgaLayout = "ADVENTURE"
	MtgaLayoutClass     MtgaLayout = "CLASS"
	MtgaLayoutSaga      MtgaLayout = "SAGA"
	MtgaLayoutSplit     MtgaLayout = "SPLIT"
	MtgaLayoutPrototype MtgaLayout = "PROTOTYPE"
	MtgaLayoutMutate    MtgaLayout = "MUTATE"
	MtgaLayoutMeld      MtgaLayout = "MELD"
	MtgaLayoutCase      MtgaLayout = "CASE"
)

var AllMtgaLayout = []MtgaLayout{
	MtgaLayoutNormal,
	MtgaLayoutModalDfc,
	MtgaLayoutTransform,
	MtgaLayoutAdventure,
	MtgaLayoutClass,
	MtgaLayoutSaga,
	MtgaLayoutSplit,
	MtgaLayoutPrototype,
	MtgaLayoutMutate,
	MtgaLayoutMeld,
	MtgaLayoutCase,
}

func (e MtgaLayout) IsValid() bool {
	switch e {
	case MtgaLayoutNormal, MtgaLayoutModalDfc, MtgaLayoutTransform, MtgaLayoutAdventure, MtgaLayoutClass, MtgaLayoutSaga, MtgaLayoutSplit, MtgaLayoutPrototype, MtgaLayoutMutate, MtgaLayoutMeld, MtgaLayoutCase:
		return true
	}
	return false
}

func (e MtgaLayout) String() string {
	return string(e)
}

func (e *MtgaLayout) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MtgaLayout(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MTGA_Layout", str)
	}
	return nil
}

func (e MtgaLayout) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MtgaRarity string

const (
	MtgaRarityCommon   MtgaRarity = "COMMON"
	MtgaRarityUncommon MtgaRarity = "UNCOMMON"
	MtgaRarityRare     MtgaRarity = "RARE"
	MtgaRarityMythic   MtgaRarity = "MYTHIC"
)

var AllMtgaRarity = []MtgaRarity{
	MtgaRarityCommon,
	MtgaRarityUncommon,
	MtgaRarityRare,
	MtgaRarityMythic,
}

func (e MtgaRarity) IsValid() bool {
	switch e {
	case MtgaRarityCommon, MtgaRarityUncommon, MtgaRarityRare, MtgaRarityMythic:
		return true
	}
	return false
}

func (e MtgaRarity) String() string {
	return string(e)
}

func (e *MtgaRarity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MtgaRarity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MTGA_Rarity", str)
	}
	return nil
}

func (e MtgaRarity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
