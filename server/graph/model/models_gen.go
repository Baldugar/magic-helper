// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type MtgaCommonFields interface {
	IsMtgaCommonFields()
	GetColors() []MtgaColor
	GetFlavorText() *string
	GetImage() *MtgaImage
	GetLoyalty() *string
	GetName() string
	GetPower() *string
	GetProducedMana() []MtgaColor
	GetToughness() *string
	GetTypeLine() string
}

type FlowZone struct {
	ID       string    `json:"ID"`
	Name     string    `json:"name"`
	Position *Position `json:"position"`
	Width    float64   `json:"width"`
	Height   float64   `json:"height"`
}

type FlowZoneInput struct {
	ID       string         `json:"ID"`
	Name     string         `json:"name"`
	Position *PositionInput `json:"position"`
	Width    float64        `json:"width"`
	Height   float64        `json:"height"`
}

type MtgaCard struct {
	ID            string                 `json:"_key"`
	CardFaces     []*MtgaCardFace        `json:"cardFaces,omitempty"`
	Cmc           int                    `json:"cmc"`
	ColorIdentity []MtgaColor            `json:"colorIdentity"`
	Colors        []MtgaColor            `json:"colors,omitempty"`
	Description   *string                `json:"description,omitempty"`
	FlavorText    *string                `json:"flavorText,omitempty"`
	Image         *MtgaImage             `json:"image,omitempty"`
	Layout        string                 `json:"layout"`
	Legalities    map[string]interface{} `json:"legalities"`
	Loyalty       *string                `json:"loyalty,omitempty"`
	ManaCost      *string                `json:"manaCost,omitempty"`
	Name          string                 `json:"name"`
	Power         *string                `json:"power,omitempty"`
	ProducedMana  []MtgaColor            `json:"producedMana,omitempty"`
	Rarity        MtgaRarity             `json:"rarity"`
	Set           string                 `json:"set"`
	SetName       string                 `json:"setName"`
	Toughness     *string                `json:"toughness,omitempty"`
	TypeLine      string                 `json:"typeLine"`
}

func (MtgaCard) IsMtgaCommonFields() {}
func (this MtgaCard) GetColors() []MtgaColor {
	if this.Colors == nil {
		return nil
	}
	interfaceSlice := make([]MtgaColor, 0, len(this.Colors))
	for _, concrete := range this.Colors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this MtgaCard) GetFlavorText() *string { return this.FlavorText }
func (this MtgaCard) GetImage() *MtgaImage   { return this.Image }
func (this MtgaCard) GetLoyalty() *string    { return this.Loyalty }
func (this MtgaCard) GetName() string        { return this.Name }
func (this MtgaCard) GetPower() *string      { return this.Power }
func (this MtgaCard) GetProducedMana() []MtgaColor {
	if this.ProducedMana == nil {
		return nil
	}
	interfaceSlice := make([]MtgaColor, 0, len(this.ProducedMana))
	for _, concrete := range this.ProducedMana {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this MtgaCard) GetToughness() *string { return this.Toughness }
func (this MtgaCard) GetTypeLine() string   { return this.TypeLine }

type MtgaCardFace struct {
	Colors       []MtgaColor `json:"colors,omitempty"`
	Description  string      `json:"description"`
	FlavorText   *string     `json:"flavorText,omitempty"`
	Image        *MtgaImage  `json:"image,omitempty"`
	Loyalty      *string     `json:"loyalty,omitempty"`
	ManaCost     string      `json:"manaCost"`
	Name         string      `json:"name"`
	Power        *string     `json:"power,omitempty"`
	ProducedMana []MtgaColor `json:"producedMana,omitempty"`
	Toughness    *string     `json:"toughness,omitempty"`
	TypeLine     string      `json:"typeLine"`
}

func (MtgaCardFace) IsMtgaCommonFields() {}
func (this MtgaCardFace) GetColors() []MtgaColor {
	if this.Colors == nil {
		return nil
	}
	interfaceSlice := make([]MtgaColor, 0, len(this.Colors))
	for _, concrete := range this.Colors {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this MtgaCardFace) GetFlavorText() *string { return this.FlavorText }
func (this MtgaCardFace) GetImage() *MtgaImage   { return this.Image }
func (this MtgaCardFace) GetLoyalty() *string    { return this.Loyalty }
func (this MtgaCardFace) GetName() string        { return this.Name }
func (this MtgaCardFace) GetPower() *string      { return this.Power }
func (this MtgaCardFace) GetProducedMana() []MtgaColor {
	if this.ProducedMana == nil {
		return nil
	}
	interfaceSlice := make([]MtgaColor, 0, len(this.ProducedMana))
	for _, concrete := range this.ProducedMana {
		interfaceSlice = append(interfaceSlice, concrete)
	}
	return interfaceSlice
}
func (this MtgaCardFace) GetToughness() *string { return this.Toughness }
func (this MtgaCardFace) GetTypeLine() string   { return this.TypeLine }

type MtgaCreateDeckInput struct {
	Name string   `json:"name"`
	Type DeckType `json:"type"`
}

type MtgaDeck struct {
	ID             string          `json:"_key"`
	Name           string          `json:"name"`
	CardFrontImage *string         `json:"cardFrontImage,omitempty"`
	Cards          []*MtgaDeckCard `json:"cards"`
	Zones          []*FlowZone     `json:"zones"`
	Type           DeckType        `json:"type"`
}

type MtgaDeckCard struct {
	Card         *MtgaCard        `json:"card"`
	Count        int              `json:"count"`
	Position     *Position        `json:"position"`
	MainOrSide   MainOrSide       `json:"mainOrSide"`
	DeckCardType MtgaDeckCardType `json:"deckCardType"`
	Phantoms     []*Position      `json:"phantoms"`
}

type MtgaDeckCardInput struct {
	ID           string           `json:"ID"`
	Card         string           `json:"card"`
	Count        int              `json:"count"`
	Position     *PositionInput   `json:"position"`
	MainOrSide   MainOrSide       `json:"mainOrSide"`
	DeckCardType MtgaDeckCardType `json:"deckCardType"`
	Phantoms     []*PositionInput `json:"phantoms"`
}

type MtgaDeleteDeckInput struct {
	DeckID string `json:"deckID"`
}

type MtgaFilterCardTypes struct {
	CardType string   `json:"cardType"`
	Subtypes []string `json:"subtypes"`
}

type MtgaFilterEntries struct {
	Types      []*MtgaFilterCardTypes `json:"types"`
	Expansions []*MtgaFilterExpansion `json:"expansions"`
	Legality   *MtgaFilterLegality    `json:"legality"`
}

type MtgaFilterExpansion struct {
	Set        string `json:"set"`
	SetName    string `json:"setName"`
	ReleasedAt int    `json:"releasedAt"`
	ImageURL   string `json:"imageURL"`
}

type MtgaFilterLegality struct {
	Formats        []string `json:"formats"`
	LegalityValues []string `json:"legalityValues"`
}

type MtgaImage struct {
	ArtCrop    string `json:"artCrop"`
	BorderCrop string `json:"borderCrop"`
	Large      string `json:"large"`
	Normal     string `json:"normal"`
	Png        string `json:"png"`
	Small      string `json:"small"`
}

type MtgaUpdateDeckInput struct {
	DeckID         string               `json:"deckID"`
	Name           string               `json:"name"`
	Type           DeckType             `json:"type"`
	CardFrontImage *string              `json:"cardFrontImage,omitempty"`
	Cards          []*MtgaDeckCardInput `json:"cards"`
	Zones          []*FlowZoneInput     `json:"zones"`
}

type Mutation struct {
}

type Position struct {
	X        float64 `json:"x"`
	Y        float64 `json:"y"`
	ParentID *string `json:"parentID,omitempty"`
}

type PositionInput struct {
	X        float64 `json:"x"`
	Y        float64 `json:"y"`
	ParentID *string `json:"parentID,omitempty"`
}

type Query struct {
}

type Response struct {
	Status  bool    `json:"status"`
	Message *string `json:"message,omitempty"`
}

type DeckType string

const (
	DeckTypeBrawl60  DeckType = "BRAWL_60"
	DeckTypeBrawl100 DeckType = "BRAWL_100"
)

var AllDeckType = []DeckType{
	DeckTypeBrawl60,
	DeckTypeBrawl100,
}

func (e DeckType) IsValid() bool {
	switch e {
	case DeckTypeBrawl60, DeckTypeBrawl100:
		return true
	}
	return false
}

func (e DeckType) String() string {
	return string(e)
}

func (e *DeckType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = DeckType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid DeckType", str)
	}
	return nil
}

func (e DeckType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MtgaColor string

const (
	MtgaColorC MtgaColor = "C"
	MtgaColorW MtgaColor = "W"
	MtgaColorU MtgaColor = "U"
	MtgaColorB MtgaColor = "B"
	MtgaColorR MtgaColor = "R"
	MtgaColorG MtgaColor = "G"
)

var AllMtgaColor = []MtgaColor{
	MtgaColorC,
	MtgaColorW,
	MtgaColorU,
	MtgaColorB,
	MtgaColorR,
	MtgaColorG,
}

func (e MtgaColor) IsValid() bool {
	switch e {
	case MtgaColorC, MtgaColorW, MtgaColorU, MtgaColorB, MtgaColorR, MtgaColorG:
		return true
	}
	return false
}

func (e MtgaColor) String() string {
	return string(e)
}

func (e *MtgaColor) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MtgaColor(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MTGA_Color", str)
	}
	return nil
}

func (e MtgaColor) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MtgaDeckCardType string

const (
	MtgaDeckCardTypeNormal    MtgaDeckCardType = "NORMAL"
	MtgaDeckCardTypeCompanion MtgaDeckCardType = "COMPANION"
	MtgaDeckCardTypeCommander MtgaDeckCardType = "COMMANDER"
)

var AllMtgaDeckCardType = []MtgaDeckCardType{
	MtgaDeckCardTypeNormal,
	MtgaDeckCardTypeCompanion,
	MtgaDeckCardTypeCommander,
}

func (e MtgaDeckCardType) IsValid() bool {
	switch e {
	case MtgaDeckCardTypeNormal, MtgaDeckCardTypeCompanion, MtgaDeckCardTypeCommander:
		return true
	}
	return false
}

func (e MtgaDeckCardType) String() string {
	return string(e)
}

func (e *MtgaDeckCardType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MtgaDeckCardType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MTGA_DeckCardType", str)
	}
	return nil
}

func (e MtgaDeckCardType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MtgaLayout string

const (
	MtgaLayoutNormal    MtgaLayout = "NORMAL"
	MtgaLayoutModalDfc  MtgaLayout = "MODAL_DFC"
	MtgaLayoutTransform MtgaLayout = "TRANSFORM"
	MtgaLayoutAdventure MtgaLayout = "ADVENTURE"
	MtgaLayoutClass     MtgaLayout = "CLASS"
	MtgaLayoutSaga      MtgaLayout = "SAGA"
	MtgaLayoutSplit     MtgaLayout = "SPLIT"
	MtgaLayoutPrototype MtgaLayout = "PROTOTYPE"
	MtgaLayoutMutate    MtgaLayout = "MUTATE"
	MtgaLayoutMeld      MtgaLayout = "MELD"
	MtgaLayoutCase      MtgaLayout = "CASE"
)

var AllMtgaLayout = []MtgaLayout{
	MtgaLayoutNormal,
	MtgaLayoutModalDfc,
	MtgaLayoutTransform,
	MtgaLayoutAdventure,
	MtgaLayoutClass,
	MtgaLayoutSaga,
	MtgaLayoutSplit,
	MtgaLayoutPrototype,
	MtgaLayoutMutate,
	MtgaLayoutMeld,
	MtgaLayoutCase,
}

func (e MtgaLayout) IsValid() bool {
	switch e {
	case MtgaLayoutNormal, MtgaLayoutModalDfc, MtgaLayoutTransform, MtgaLayoutAdventure, MtgaLayoutClass, MtgaLayoutSaga, MtgaLayoutSplit, MtgaLayoutPrototype, MtgaLayoutMutate, MtgaLayoutMeld, MtgaLayoutCase:
		return true
	}
	return false
}

func (e MtgaLayout) String() string {
	return string(e)
}

func (e *MtgaLayout) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MtgaLayout(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MTGA_Layout", str)
	}
	return nil
}

func (e MtgaLayout) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MtgaRarity string

const (
	MtgaRarityCommon   MtgaRarity = "COMMON"
	MtgaRarityUncommon MtgaRarity = "UNCOMMON"
	MtgaRarityRare     MtgaRarity = "RARE"
	MtgaRarityMythic   MtgaRarity = "MYTHIC"
)

var AllMtgaRarity = []MtgaRarity{
	MtgaRarityCommon,
	MtgaRarityUncommon,
	MtgaRarityRare,
	MtgaRarityMythic,
}

func (e MtgaRarity) IsValid() bool {
	switch e {
	case MtgaRarityCommon, MtgaRarityUncommon, MtgaRarityRare, MtgaRarityMythic:
		return true
	}
	return false
}

func (e MtgaRarity) String() string {
	return string(e)
}

func (e *MtgaRarity) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MtgaRarity(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MTGA_Rarity", str)
	}
	return nil
}

func (e MtgaRarity) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type MainOrSide string

const (
	MainOrSideMain      MainOrSide = "MAIN"
	MainOrSideSideboard MainOrSide = "SIDEBOARD"
)

var AllMainOrSide = []MainOrSide{
	MainOrSideMain,
	MainOrSideSideboard,
}

func (e MainOrSide) IsValid() bool {
	switch e {
	case MainOrSideMain, MainOrSideSideboard:
		return true
	}
	return false
}

func (e MainOrSide) String() string {
	return string(e)
}

func (e *MainOrSide) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = MainOrSide(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid MainOrSide", str)
	}
	return nil
}

func (e MainOrSide) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
